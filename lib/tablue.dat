//  tablue.dat
//
//    Auto-fitter data for blue strings.
//
// Copyright (C) 2013-2016 by Werner Lemberg.
//
// This file is part of the ttfautohint library, and may only be used,
// modified, and distributed under the terms given in `COPYING'.  By
// continuing to use, modify, or distribute this file you indicate that you
// have read `COPYING' and understand and accept it fully.
//
// The file `COPYING' mentioned in the previous paragraph is distributed
// with the ttfautohint library.

// originally file `afblue.dat' (2013-Sep-22) from FreeType */


// This file contains data specific to blue zones.  It gets processed by
// a script to simulate `jagged arrays', with enumeration values holding
// offsets into the arrays.
//
// The format of the file is rather simple:  A section starts with three
// labels separated by whitespace and followed by a colon (everything in a
// single line); the first label gives the name of the enumeration template,
// the second the name of the array template, and the third the name of the
// `maximum' template.  The script then fills the corresponding templates
// (indicated by `@' characters around the name).
//
// A section contains one or more data records.  Each data record consists
// of two or more lines.  The first line holds the enumeration name, and the
// remaining lines the corresponding array data.
//
// There are two possible representations for array data.
//
// - A string of characters or character clusters (for example, representing
//   Aksharas, Devanagari syllables) in UTF-8 encoding enclosed in double
//   quotes, using C syntax, where the elements are separated by spaces.
//   There can be only one string per line, thus the starting and ending
//   double quote must be the first and last character in the line,
//   respectively, ignoring whitespace before and after the string.  If
//   there are multiple strings (in multiple lines), they are concatenated
//   to a single string.  In the output, a string gets represented as a
//   series of singles bytes, followed by a zero byte.  The enumeration
//   values simply hold byte offsets to the start of the corresponding
//   strings.
//
//   For strings, the `maximum' template holds the maximum number of
//   non-space characters in all strings.
//
// - Data blocks enclosed in balanced braces, which get copied verbatim and
//   which can span multiple lines.  The opening brace of a block must be
//   the first character of a line (ignoring whitespace), and the closing
//   brace the last (ignoring whitespace also).  The script appends a comma
//   character after each block and counts the number of blocks to set the
//   enumeration values.
//
//   For data blocks, the `maximum' template holds the maximum number of
//   array elements.
//
// A section can contain either strings only or data blocks only.
//
// A comment line starts with `//'; it gets removed.  A preprocessor
// directive line (using the standard syntax of `cpp') starts with `#' and
// gets copied verbatim to both the enumeration and the array.  Whitespace
// outside of a string is insignificant.
//
// Preprocessor directives are ignored while the script computes maximum
// values; this essentially means that the maximum values can easily be too
// large.  Given that the purpose of those values is to create local
// fixed-size arrays at compile time for further processing of the blue zone
// data, this isn't a problem.  Note the the final zero byte of a string is
// not counted.  Note also that the count holds the number of UTF-8 encoded
// characters, not bytes.


// The blue zone string data, to be used in the blue stringsets below.

TA_BLUE_STRING_ENUM TA_BLUE_STRINGS_ARRAY TA_BLUE_STRING_MAX_LEN:

  TA_BLUE_STRING_ARABIC_TOP
    "ا إ ل ك ط ظ"
  TA_BLUE_STRING_ARABIC_BOTTOM
    "ت ث ط ظ ك"
  // We don't necessarily have access to medial forms via Unicode in case
  // Arabic presentational forms are missing.  The only character that is
  // guaranteed to have the same vertical position with joining (this is,
  // non-isolated) forms is U+0640, ARABIC TATWEEL, which must join both
  // round and flat curves.
  TA_BLUE_STRING_ARABIC_JOIN
    "ـ"

  TA_BLUE_STRING_BENGALI_BASE
    "অ ড ত ন ব ভ ল ক"
  TA_BLUE_STRING_BENGALI_TOP
    "ই ট ঠ ি ী ৈ ৗ"
  TA_BLUE_STRING_BENGALI_HEAD
    "ও এ ড ত ন ব ল ক"

  TA_BLUE_STRING_CYRILLIC_CAPITAL_TOP
    "Б В Е П З О С Э"
  TA_BLUE_STRING_CYRILLIC_CAPITAL_BOTTOM
    "Б В Е Ш З О С Э"
  TA_BLUE_STRING_CYRILLIC_SMALL
    "х п н ш е з о с"
  TA_BLUE_STRING_CYRILLIC_SMALL_DESCENDER
    "р у ф"

  TA_BLUE_STRING_DEVANAGARI_BASE
    "क न म उ छ ट ठ ड"
  TA_BLUE_STRING_DEVANAGARI_TOP
    "ई ऐ ओ औ ि ी ो ौ"
  // note that some fonts have extreme variation in the height of the
  // round head elements; for this reason we also define the `base'
  // blue zone, which must be always present
  TA_BLUE_STRING_DEVANAGARI_HEAD
    "क म अ आ थ ध भ श"
  TA_BLUE_STRING_DEVANAGARI_BOTTOM
    "ु ृ"

  TA_BLUE_STRING_GREEK_CAPITAL_TOP
    "Γ Β Ε Ζ Θ Ο Ω"
  TA_BLUE_STRING_GREEK_CAPITAL_BOTTOM
    "Β Δ Ζ Ξ Θ Ο"
  TA_BLUE_STRING_GREEK_SMALL_BETA_TOP
    "β θ δ ζ λ ξ"
  TA_BLUE_STRING_GREEK_SMALL
    "α ε ι ο π σ τ ω"
  TA_BLUE_STRING_GREEK_SMALL_DESCENDER
    "β γ η μ ρ φ χ ψ"

  TA_BLUE_STRING_HEBREW_TOP
    "ב ד ה ח ך כ ם ס"
  TA_BLUE_STRING_HEBREW_BOTTOM
    "ב ט כ ם ס צ"
  TA_BLUE_STRING_HEBREW_DESCENDER
    "ק ך ן ף ץ"

  TA_BLUE_STRING_KANNADA_TOP
    "ಇ ಊ ಐ ಣ ಸಾ ನಾ ದಾ ರಾ"
  TA_BLUE_STRING_KANNADA_BOTTOM
    "ಅ ಉ ಎ ಲ ೦ ೨ ೬ ೭"

  TA_BLUE_STRING_KHMER_TOP
    "ខ ទ ន ឧ ឩ ា"
  TA_BLUE_STRING_KHMER_SUBSCRIPT_TOP
    "ក្ក ក្ខ ក្គ ក្ថ"
  TA_BLUE_STRING_KHMER_BOTTOM
    "ខ ឃ ច ឋ ប ម យ ឲ"
  TA_BLUE_STRING_KHMER_DESCENDER
    "ត្រ រៀ ឲ្យ អឿ"
  TA_BLUE_STRING_KHMER_LARGE_DESCENDER
    "ន្ត្រៃ ង្ខ្យ ក្បៀ ច្រៀ ន្តឿ ល្បឿ"

  TA_BLUE_STRING_KHMER_SYMBOLS_WAXING_TOP
    "᧠ ᧡"
  TA_BLUE_STRING_KHMER_SYMBOLS_WANING_BOTTOM
    "᧶ ᧹"

  TA_BLUE_STRING_LAO_TOP
    "າ ດ ອ ມ ລ ວ ຣ ງ"
  TA_BLUE_STRING_LAO_BOTTOM
    "າ ອ ບ ຍ ຣ ຮ ວ ຢ"
  TA_BLUE_STRING_LAO_ASCENDER
    "ປ ຢ ຟ ຝ"
  TA_BLUE_STRING_LAO_LARGE_ASCENDER
    "ໂ ໄ ໃ"
  TA_BLUE_STRING_LAO_DESCENDER
    "ງ ຊ ຖ ຽ ໆ ຯ"

  TA_BLUE_STRING_LATIN_CAPITAL_TOP
    "T H E Z O C Q S"
  TA_BLUE_STRING_LATIN_CAPITAL_BOTTOM
    "H E Z L O C U S"
  TA_BLUE_STRING_LATIN_SMALL_F_TOP
    "f i j k d b h"
  TA_BLUE_STRING_LATIN_SMALL
    "x z r o e s c"
  TA_BLUE_STRING_LATIN_SMALL_DESCENDER
    "p q g j y"

  // we assume that both the subscript and superscript ranges
  // don't contain oldstyle digits (actually, most fonts probably
  // have digits only in those ranges)
  TA_BLUE_STRING_LATIN_SUBS_CAPITAL_TOP
    "₀ ₃ ₅ ₇ ₈"
  TA_BLUE_STRING_LATIN_SUBS_CAPITAL_BOTTOM
    "₀ ₁ ₂ ₃ ₈"
  TA_BLUE_STRING_LATIN_SUBS_SMALL_F_TOP
    "ᵢ ⱼ ₕ ₖ ₗ"
  TA_BLUE_STRING_LATIN_SUBS_SMALL
    "ₐ ₑ ₒ ₓ ₙ ₛ ᵥ ᵤ ᵣ"
  TA_BLUE_STRING_LATIN_SUBS_SMALL_DESCENDER
    "ᵦ ᵧ ᵨ ᵩ ₚ"

  TA_BLUE_STRING_LATIN_SUPS_CAPITAL_TOP
    "⁰ ³ ⁵ ⁷ ᵀ ᴴ ᴱ ᴼ"
  TA_BLUE_STRING_LATIN_SUPS_CAPITAL_BOTTOM
    "⁰ ¹ ² ³ ᴱ ᴸ ᴼ ᵁ"
  TA_BLUE_STRING_LATIN_SUPS_SMALL_F_TOP
    "ᵇ ᵈ ᵏ ʰ ʲ ᶠ ⁱ"
  TA_BLUE_STRING_LATIN_SUPS_SMALL
    "ᵉ ᵒ ʳ ˢ ˣ ᶜ ᶻ"
  TA_BLUE_STRING_LATIN_SUPS_SMALL_DESCENDER
    "ᵖ ʸ ᵍ"

  TA_BLUE_STRING_MYANMAR_TOP
    "ခ ဂ င ဒ ဝ ၥ ၊ ။"
  TA_BLUE_STRING_MYANMAR_BOTTOM
    "င ဎ ဒ ပ ဗ ဝ ၊ ။"
  TA_BLUE_STRING_MYANMAR_ASCENDER
    "ဩ ြ ၍ ၏ ၆ ါ ိ"
  TA_BLUE_STRING_MYANMAR_DESCENDER
    "ဉ ည ဥ ဩ ဨ ၂ ၅ ၉"

  TA_BLUE_STRING_TELUGU_TOP
    "ఇ ఌ ఙ ఞ ణ ఱ ౯"
  TA_BLUE_STRING_TELUGU_BOTTOM
    "అ క చ ర ఽ ౨ ౬"

  TA_BLUE_STRING_THAI_TOP
    "บ เ แ อ ก า"
  TA_BLUE_STRING_THAI_BOTTOM
    "บ ป ษ ฯ อ ย ฮ"
  TA_BLUE_STRING_THAI_ASCENDER
    "ป ฝ ฟ"
  TA_BLUE_STRING_THAI_LARGE_ASCENDER
    "โ ใ ไ"
  TA_BLUE_STRING_THAI_DESCENDER
    "ฎ ฏ ฤ ฦ"
  TA_BLUE_STRING_THAI_LARGE_DESCENDER
    "ญ ฐ"
  TA_BLUE_STRING_THAI_DIGIT_TOP
    "๐ ๑ ๓"

// The blue zone stringsets, as used in the script styles, cf. `tastyles.h'.
//
// The TA_BLUE_PROPERTY_XXX flags are defined in `tablue.h'; here some
// explanations.
//
// A blue zone in general is defined by a reference and an overshoot line.
// During the hinting process, all coordinate values between those two lines
// are set equal to the reference value, provided that the blue zone is not
// wider than 0.75 pixels (otherwise the blue zone gets ignored).  All
// entries must have `TA_BLUE_STRING_MAX' as the final line.
//
// During the glyph analysis, edges are sorted from bottom to top, and then
// sequentially checked, edge by edge, against the blue zones in the order
// given below.
//
//
// latin auto-hinter
// -----------------
//
// Characters in a blue string are automatically classified as having a flat
// (reference) or a round (overshoot) extremum.  The blue zone is then set
// up by the mean values of all flat extrema and all round extrema,
// respectively.  Only horizontal blue zones (i.e., adjusting vertical
// coordinate values) are supported.
//
// Some scripts like Khmer need character composition to get all necessary
// blue zones, since Unicode only provides an abstract data model that
// doesn't represent all possible glyph shapes.  For such character
// clusters, the HarfBuzz library is used to convert them into the
// corresponding glyphs.  The largest glyph element (where `largest' can be
// either `largest ascender' or `largest descender') then defines the
// corresponding flat or round extremum.
//
// For the latin auto-hinter, the overshoot should be larger than the
// reference for top zones, and vice versa for bottom zones.
//
//   LATIN_TOP
//     Take the maximum flat and round coordinate values of the blue string
//     characters for computing the blue zone's reference and overshoot
//     values.
//
//     If not set, take the minimum values.
//
//     Mutually exclusive with `LATIN_SUB_TOP'.
//
//   LATIN_SUB_TOP
//     For all glyphs of a character cluster, compute the maximum flat
//     and round coordinate values of each component, then take the
//     smallest of the maximum values.  The idea is to get the top of
//     subscript glyphs, as used in Khmer, for example.  Note that
//     this mechanism doesn't work for ordinary ligatures.
//
//     This flags indicates a secondary blue zone: It gets removed if
//     there is a non-LATIN_SUB_TOP blue zone at the same coordinate
//     value (after scaling).
//
//     Mutually exclusive with `LATIN_TOP'.
//
//   LATIN_NEUTRAL
//     Ignore round extrema and define the blue zone with flat values only.
//     Both top and bottom of contours can match.  This is useful for
//     scripts like Devanagari where vowel signs attach to the base
//     character and are implemented as components of composite glyphs.
//
//     If not set, both round and flat extrema are taken into account.
//     Additionally, only the top or the bottom of a contour can match,
//     depending on the LATIN_TOP flag.
//
//     Neutral blue zones should always follow non-neutral blue zones.
//
//   LATIN_X_HEIGHT
//     Scale all glyphs vertically from the corresponding script to make the
//     reference line of this blue zone align on the grid.  The scaling
//     takes place before all other blue zones get aligned to the grid.
//     Only one blue character string of a script style can have this flag.
//
//   LATIN_LONG
//     Apply an additional constraint for blue zone values: Don't
//     necessarily use the extremum as-is but a segment of the topmost (or
//     bottommost) contour that is longer than a heuristic threshold, and
//     which is not too far away vertically from the real extremum.  This
//     ensures that small bumps in the outline are ignored (for example, the
//     `vertical serifs' found in many Hebrew glyph designs).
//
//     The segment must be at least EM/25 font units long, and the distance
//     to the extremum must be smaller than EM/4.


TA_BLUE_STRINGSET_ENUM TA_BLUE_STRINGSETS_ARRAY TA_BLUE_STRINGSET_MAX_LEN:

  TA_BLUE_STRINGSET_ARAB
    { TA_BLUE_STRING_ARABIC_TOP,    TA_BLUE_PROPERTY_LATIN_TOP     }
    { TA_BLUE_STRING_ARABIC_BOTTOM, 0                              }
    { TA_BLUE_STRING_ARABIC_JOIN,   TA_BLUE_PROPERTY_LATIN_NEUTRAL }
    { TA_BLUE_STRING_MAX,           0                              }

  TA_BLUE_STRINGSET_BENG
    { TA_BLUE_STRING_BENGALI_TOP,    TA_BLUE_PROPERTY_LATIN_TOP        }
    { TA_BLUE_STRING_BENGALI_HEAD,   TA_BLUE_PROPERTY_LATIN_TOP        }
    { TA_BLUE_STRING_BENGALI_BASE,   TA_BLUE_PROPERTY_LATIN_TOP      |
                                     TA_BLUE_PROPERTY_LATIN_NEUTRAL  |
                                     TA_BLUE_PROPERTY_LATIN_X_HEIGHT   }
    { TA_BLUE_STRING_BENGALI_BASE,   0                                 }
    { TA_BLUE_STRING_MAX,            0                                 }

  TA_BLUE_STRINGSET_CYRL
    { TA_BLUE_STRING_CYRILLIC_CAPITAL_TOP,     TA_BLUE_PROPERTY_LATIN_TOP        }
    { TA_BLUE_STRING_CYRILLIC_CAPITAL_BOTTOM,  0                                 }
    { TA_BLUE_STRING_CYRILLIC_SMALL,           TA_BLUE_PROPERTY_LATIN_TOP      |
                                               TA_BLUE_PROPERTY_LATIN_X_HEIGHT   }
    { TA_BLUE_STRING_CYRILLIC_SMALL,           0                                 }
    { TA_BLUE_STRING_CYRILLIC_SMALL_DESCENDER, 0                                 }
    { TA_BLUE_STRING_MAX,                      0                                 }

  TA_BLUE_STRINGSET_DEVA
    { TA_BLUE_STRING_DEVANAGARI_TOP,    TA_BLUE_PROPERTY_LATIN_TOP        }
    { TA_BLUE_STRING_DEVANAGARI_HEAD,   TA_BLUE_PROPERTY_LATIN_TOP        }
    { TA_BLUE_STRING_DEVANAGARI_BASE,   TA_BLUE_PROPERTY_LATIN_TOP      |
                                        TA_BLUE_PROPERTY_LATIN_NEUTRAL  |
                                        TA_BLUE_PROPERTY_LATIN_X_HEIGHT   }
    { TA_BLUE_STRING_DEVANAGARI_BASE,   0                                 }
    { TA_BLUE_STRING_DEVANAGARI_BOTTOM, 0                                 }
    { TA_BLUE_STRING_MAX,               0                                 }

  TA_BLUE_STRINGSET_GREK
    { TA_BLUE_STRING_GREEK_CAPITAL_TOP,     TA_BLUE_PROPERTY_LATIN_TOP        }
    { TA_BLUE_STRING_GREEK_CAPITAL_BOTTOM,  0                                 }
    { TA_BLUE_STRING_GREEK_SMALL_BETA_TOP,  TA_BLUE_PROPERTY_LATIN_TOP        }
    { TA_BLUE_STRING_GREEK_SMALL,           TA_BLUE_PROPERTY_LATIN_TOP      |
                                            TA_BLUE_PROPERTY_LATIN_X_HEIGHT   }
    { TA_BLUE_STRING_GREEK_SMALL,           0                                 }
    { TA_BLUE_STRING_GREEK_SMALL_DESCENDER, 0                                 }
    { TA_BLUE_STRING_MAX,                   0                                 }

  TA_BLUE_STRINGSET_HEBR
    { TA_BLUE_STRING_HEBREW_TOP,       TA_BLUE_PROPERTY_LATIN_TOP  |
                                       TA_BLUE_PROPERTY_LATIN_LONG   }
    { TA_BLUE_STRING_HEBREW_BOTTOM,    0                             }
    { TA_BLUE_STRING_HEBREW_DESCENDER, 0                             }
    { TA_BLUE_STRING_MAX,              0                             }

  TA_BLUE_STRINGSET_KNDA
    { TA_BLUE_STRING_KANNADA_TOP,    TA_BLUE_PROPERTY_LATIN_TOP }
    { TA_BLUE_STRING_KANNADA_BOTTOM, 0                          }
    { TA_BLUE_STRING_MAX,            0                          }

  TA_BLUE_STRINGSET_KHMR
    { TA_BLUE_STRING_KHMER_TOP,             TA_BLUE_PROPERTY_LATIN_TOP      |
                                            TA_BLUE_PROPERTY_LATIN_X_HEIGHT   }
    { TA_BLUE_STRING_KHMER_SUBSCRIPT_TOP,   TA_BLUE_PROPERTY_LATIN_SUB_TOP    }
    { TA_BLUE_STRING_KHMER_BOTTOM,          0                                 }
    { TA_BLUE_STRING_KHMER_DESCENDER,       0                                 }
    { TA_BLUE_STRING_KHMER_LARGE_DESCENDER, 0                                 }
    { TA_BLUE_STRING_MAX,                   0                                 }

  TA_BLUE_STRINGSET_KHMS
    { TA_BLUE_STRING_KHMER_SYMBOLS_WAXING_TOP,    TA_BLUE_PROPERTY_LATIN_TOP      |
                                                  TA_BLUE_PROPERTY_LATIN_X_HEIGHT   }
    { TA_BLUE_STRING_KHMER_SYMBOLS_WANING_BOTTOM, 0                                 }
    { TA_BLUE_STRING_MAX,                         0                                 }

  TA_BLUE_STRINGSET_LAO
    { TA_BLUE_STRING_LAO_TOP,            TA_BLUE_PROPERTY_LATIN_TOP      |
                                         TA_BLUE_PROPERTY_LATIN_X_HEIGHT   }
    { TA_BLUE_STRING_LAO_BOTTOM,         0                                 }
    { TA_BLUE_STRING_LAO_ASCENDER,       TA_BLUE_PROPERTY_LATIN_TOP        }
    { TA_BLUE_STRING_LAO_LARGE_ASCENDER, TA_BLUE_PROPERTY_LATIN_TOP        }
    { TA_BLUE_STRING_LAO_DESCENDER,      0                                 }
    { TA_BLUE_STRING_MAX,                0                                 }

  TA_BLUE_STRINGSET_LATN
    { TA_BLUE_STRING_LATIN_CAPITAL_TOP,     TA_BLUE_PROPERTY_LATIN_TOP        }
    { TA_BLUE_STRING_LATIN_CAPITAL_BOTTOM,  0                                 }
    { TA_BLUE_STRING_LATIN_SMALL_F_TOP,     TA_BLUE_PROPERTY_LATIN_TOP        }
    { TA_BLUE_STRING_LATIN_SMALL,           TA_BLUE_PROPERTY_LATIN_TOP      |
                                            TA_BLUE_PROPERTY_LATIN_X_HEIGHT   }
    { TA_BLUE_STRING_LATIN_SMALL,           0                                 }
    { TA_BLUE_STRING_LATIN_SMALL_DESCENDER, 0                                 }
    { TA_BLUE_STRING_MAX,                   0                                 }

  TA_BLUE_STRINGSET_LATB
    { TA_BLUE_STRING_LATIN_SUBS_CAPITAL_TOP,     TA_BLUE_PROPERTY_LATIN_TOP        }
    { TA_BLUE_STRING_LATIN_SUBS_CAPITAL_BOTTOM,  0                                 }
    { TA_BLUE_STRING_LATIN_SUBS_SMALL_F_TOP,     TA_BLUE_PROPERTY_LATIN_TOP        }
    { TA_BLUE_STRING_LATIN_SUBS_SMALL,           TA_BLUE_PROPERTY_LATIN_TOP      |
                                                 TA_BLUE_PROPERTY_LATIN_X_HEIGHT   }
    { TA_BLUE_STRING_LATIN_SUBS_SMALL,           0                                 }
    { TA_BLUE_STRING_LATIN_SUBS_SMALL_DESCENDER, 0                                 }
    { TA_BLUE_STRING_MAX,                        0                                 }

  TA_BLUE_STRINGSET_LATP
    { TA_BLUE_STRING_LATIN_SUPS_CAPITAL_TOP,     TA_BLUE_PROPERTY_LATIN_TOP        }
    { TA_BLUE_STRING_LATIN_SUPS_CAPITAL_BOTTOM,  0                                 }
    { TA_BLUE_STRING_LATIN_SUPS_SMALL_F_TOP,     TA_BLUE_PROPERTY_LATIN_TOP        }
    { TA_BLUE_STRING_LATIN_SUPS_SMALL,           TA_BLUE_PROPERTY_LATIN_TOP      |
                                                 TA_BLUE_PROPERTY_LATIN_X_HEIGHT   }
    { TA_BLUE_STRING_LATIN_SUPS_SMALL,           0                                 }
    { TA_BLUE_STRING_LATIN_SUPS_SMALL_DESCENDER, 0                                 }
    { TA_BLUE_STRING_MAX,                        0                                 }

  TA_BLUE_STRINGSET_MYMR
    { TA_BLUE_STRING_MYANMAR_TOP,       TA_BLUE_PROPERTY_LATIN_TOP      |
                                        TA_BLUE_PROPERTY_LATIN_X_HEIGHT   }
    { TA_BLUE_STRING_MYANMAR_BOTTOM,    0                                 }
    { TA_BLUE_STRING_MYANMAR_ASCENDER,  TA_BLUE_PROPERTY_LATIN_TOP        }
    { TA_BLUE_STRING_MYANMAR_DESCENDER, 0                                 }
    { TA_BLUE_STRING_MAX,               0                                 }

  TA_BLUE_STRINGSET_TELU
    { TA_BLUE_STRING_TELUGU_TOP,    TA_BLUE_PROPERTY_LATIN_TOP }
    { TA_BLUE_STRING_TELUGU_BOTTOM, 0                          }
    { TA_BLUE_STRING_MAX,           0                          }

  TA_BLUE_STRINGSET_THAI
    { TA_BLUE_STRING_THAI_TOP,             TA_BLUE_PROPERTY_LATIN_TOP      |
                                           TA_BLUE_PROPERTY_LATIN_X_HEIGHT   }
    { TA_BLUE_STRING_THAI_BOTTOM,          0                                 }
    { TA_BLUE_STRING_THAI_ASCENDER,        TA_BLUE_PROPERTY_LATIN_TOP        }
    { TA_BLUE_STRING_THAI_LARGE_ASCENDER,  TA_BLUE_PROPERTY_LATIN_TOP        }
    { TA_BLUE_STRING_THAI_DESCENDER,       0                                 }
    { TA_BLUE_STRING_THAI_LARGE_DESCENDER, 0                                 }
    { TA_BLUE_STRING_THAI_DIGIT_TOP,       0                                 }
    { TA_BLUE_STRING_MAX,                  0                                 }

// END

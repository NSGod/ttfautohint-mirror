New in Version 1.3 (XXXX-XXX-XX)
--------------------------------

* Keywords in control instruction files can be more verbose to increase
  readability.  You can now use `left`, `right`, `nodir`, `point`, `xshift`,
  and `yshift` for `l`, `r`, `n`, `p`, `x`, and `y`, respectively.

* Support for the Telugu script.


New in Version 1.2 (2014-Oct-06)
--------------------------------

* It is now possible to control the hinting process at a very low level
  using a 'control instructions' file.  Right now, two modes are supported:

    - Adding segments and changing segment directions.

    - Applying delta exceptions.  Note that this doesn't really work in
      ClearType.

  Please see the documentation for a description and a small tutorial.

  In the TTY front-end, use option `--control-file` to load such a file.

* Support for input file watching in ttfautohintGUI: If the 'Watch Input
  File' box is checked, the program automatically regenerates the output
  file as soon as the input font or control instructions file gets modified.

  The idea is to dock ttfautohintGUI to your favourite font and text editor
  instead of adding a cheap text editor to ttfautohintGUI itself.

* With the new option `--fallback-stem-width` it is now possible to set a
  default stem width for all scripts that lack proper standard characters in
  the font.

* Add alias `--adjust-subglyphs` for option `--pre-hinting` to better
  describe its functionality.  The short form `-p` stays unchanged.

* New option `--ttfa-table` to add an SFNT table `TTFA` to the output font,
  containing an ASCII dump of all used ttfautohint parameters (including
  control instructions).  Right now, this is mainly for archiving purposes. 
  Forthcoming versions of ttfautohint will be able to re-use this data if a
  font gets re-processed.

* A harmless buglet was fixed that made the `glyf` table too large by one
  byte under some circumstances.

* A bug fix taken from FreeType, correcting a crash for unusual outlines.

* Better handling of TTC files.

* New library options `error-callback` and `error-callback-data` for
  improved diagnostics.  [No change in the front-ends except better error
  messages.]

* Many other, minor fixes and improvements.


New in Version 1.1 (2014-May-05)
--------------------------------

* Support for the Devanagari script.

* Bug fixes in the computation of strong stem widths.  GDI hinting now gives
  much more consistent results.

* Better recognition of script coverage: ttfautohint now properly scans
  composite glyphs to cover components also.

* Improved glyph shape analysis: Non-flat local extrema are now recognized
  more reliably, and stem detection works better.


New in Version 1.00 (2014-Mar-20)
---------------------------------

* Much less memory consumption while handling fonts with complicated glyphs.

* Option `-s` was partially broken.


New in Version 1.00rc1 (2014-Feb-07)
------------------------------------

* OpenType feature support.  ttfautohint now uses the HarfBuzz library to
  analyze data from the `GSUB` table.  This allows the hinting of glyphs
  that don't have an entry in a font's `cmap` table, for example
  superscripts or small caps.

  Related to this, the new option `--default-script` controls the default
  (fallback) script used for OpenType features.

* More than a single standard character is used.  For example, the 'latin'
  script uses characters 'o', 'O', and digit '0'.  This improves the hinting
  of fonts (and features) that have only a partial coverage of a script's
  character repertoire.

* Much better GDI ClearType hinting in the range 30-80ppem (approx.),
  avoiding overly flat tops and bottoms of round glyphs.

* Better handling of non-square pixels (this is, horizontal and vertical
  resolutions differ) in the created TrueType bytecode.


New in Version 0.97 (2013-Nov-09)
---------------------------------

* Improved script support.  Besides Cyrillic and Greek, which are now
  handled separately from Latin, ttfautohint can handle Hebrew.

* Option `-f` now takes a parameter to specify the fallback script.  The
  corresponding long option name has been renamed from `--latin-fallback` to
  `--fallback-script`.

* Work around a bug in display environments that use FreeType 2.5.0 and
  earlier for rendering: Sometimes, the 'strong' stem width routine was used
  for DW ClearType (this is, subpixel hinting in FreeType is enabled) even
  if 'smooth' was selected while generating the font with ttfautohint.


New in Version 0.96 (2013-Aug-06)
---------------------------------

* Option `--components` has been replaced with `--composites`: By default,
  the components of a composite glyph are now hinted separately, since tests
  has shown that this gives good results in most cases.  If this option is
  set, however, the composite glyph itself gets hinted (and the hints of the
  components are ignored).

  An unfortunate side effect is that ttfautohint's option `-c` (which stays
  as a shorthand for `--composites`) now does exactly the opposite as in
  previous releases.

* Older versions of Monotype's 'iType' bytecode interpreter have a serious
  bug: The DIV instruction rounds the result, while the correct operation is
  truncation.  This caused 'exploding characters' with fonts hinted by
  ttfautohint.  Since many printers contain this rasterizer without any
  possibility to update to a non-buggy version, ttfautohint now contains
  work-arounds to circumvent the problem.

* Better support for glyphs where some points have almost the same position
  (for example glyph 'Oslash' in font 'Roboto-Thin').

* Better support for glyphs that use explicit 'on' points around round
  extrema.


New in Version 0.95 (2013-Mar-07)
---------------------------------

* New option `--dehint` to strip off all hints without generating new hints.
  This option is intended for testing purposes.

* Minor fixes to the created bytecode for compatibility.

* Minor GUI improvements.


New in Version 0.94 (2012-Nov-29)
---------------------------------

* New option `--windows-compatibility` that adds two artificial blue zones
  at vertical positions given by 'usWinAscent' and 'usWinDescent'.  This
  helps ttfautohint's hinting algorithm reduce the possibility of clipping
  if those two values are very tight.

* Implement option `--x-height-snapping-exceptions`, making ttfautohint
  avoid x-height snapping for selected PPEM values.  Useful in combination
  with `--windows-compatibility`.

* Minor fixes to the created bytecode for compatibility and robustness.


New in Version 0.93 (2012-Oct-09)
---------------------------------

* New option `--components` to treat components of composite glyphs
  separately.  This greatly reduces the bytecode size.

  I'm waiting for reports whether this option works for most fonts; in case
  this is true I'm inverting the option, making it the default (and the old
  behaviour optional).

* Full support of TTCs, this is, all subfonts get auto-hinted now.

* The upper limit of the `--increase-x-height` option has been removed.

* Drag-and-drop support in the GUI.

* The TTY version of ttfautohint now acts like a (Unix) filter, this is, it
  accepts stdin and stdout as input and output, respectively.

* Less memory consumption.


New in Version 0.92 (2012-Aug-07)
---------------------------------

* A serious bug in the created bytecode has been fixed, causing incorrect
  rounding.


New in Version 0.91 (2012-Jul-12)
---------------------------------

* A new, 'strong' routine to handle stem widths and positions has been
  added, to be selected with the `--strong-stem-width` command line option.
  If it is active, stem widths and positions are snapped to the grid as much
  as possible.  This algorithm is useful for GDI ClearType support.

* A new command line option `--debug` (not available for ttfautohintGUI) to
  print very detailed debugging information.


New in Version 0.9 (2012-Jun-06)
--------------------------------

* The created bytecode has been reduced in size, making it approx. 20%
  smaller.

* New option `--symbol` to use standard stem height and width values instead
  of using character 'o' (which may be missing).  Use this option for symbol
  fonts or math glyphs.

* More documentation (in text, HTML, and PDF format).  It's still
  incomplete, though.

* Option `--ignore-permissions` has been renamed to `--ignore-restrictions`.
  The short form is still `-i`.

* Defaults for various parameters have been set to more sensible values:

    - hinting-range-max: 50 (was 1000)
    - hinting-limit: 200 (was 1000)

* Option `--increase-x-height` now has a mandatory argument (in the range
  6-20 or value\ 0 to disable it, default value is 14).


New in Version 0.8 (2012-Mar-21)
--------------------------------

* Implement option `-x` to increase the x height of the font for small PPEM
  values by rounding up far more often then rounding down.

* Add option '`-G n`' to switch off hinting completely above value\ `n`.

* ttfautohint now appends version information and the used parameters to the
  'Version' field(s) in the 'name' table.  This can be suppressed with
  option `-n`.


New in Version 0.7 (2012-Feb-05)
--------------------------------

* A GUI has been added, using the Qt framework.  The binary is called
  'ttfautohintGUI'.


New in Version 0.6.1 (2012-Jan-02)
----------------------------------

* The improved handling of composite glyphs in 0.6 was buggy under certain
  circumstances, making ttfautohint crash and FontValidator complain.

* Dropout handling has been activated.


New in Version 0.6 (2011-Dec-25)
--------------------------------

* Improved handling of composite glyphs.

* Implement option `-p` to pre-hint glyphs with original hints before
  conversion takes place.

* Don't add a `DSIG` table if there is none in the input font.

* Human-readable error messages instead of hexadecimal error codes.

* Better tests (both at runtime and compile time) to reject too old FreeType
  versions.


New in Version 0.5 (2011-Nov-06)
--------------------------------

* Rendering on iOS is now expected to give good results.

* No bad rendering at very large PPEM values.


New in Version 0.4 (2011-Oct-27)
--------------------------------

* The bytecode has been changed to 'create' twilight points.  This should
  avoid rendering artifacts on some platforms.


New in Version 0.3 (2011-Sep-09)
--------------------------------

* Fix font generation; sometimes the `glyf` table was one byte too short,
  making the font invalid.


New in Version 0.2 (2011-Jul-19)
--------------------------------

* Fix bytecode bugs that prevented correct rendering on some platforms.


New in Version 0.1 (2011-Jun-30)
--------------------------------

* First release.

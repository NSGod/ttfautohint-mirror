% ttfautohint
% Werner Lemberg
%

<!--
  Copyright (C) 2011-2012 by Werner Lemberg.

  This file is part of the ttfautohint library, and may only be used,
  modified, and distributed under the terms given in `COPYING'.  By
  continuing to use, modify, or distribute this file you indicate that you
  have read `COPYING' and understand and accept it fully.

  The file `COPYING' mentioned in the previous paragraph is distributed
  with the ttfautohint library.
-->



Introduction
============

**ttfautohint** is a library which takes a TrueType font as the input,
removes its bytecode instructions (if any), and returns a new font where all
glyphs are bytecode hinted using the information given by FreeType's
autohinting module.  The idea is to provide the excellent quality of the
autohinter on platforms which don't use FreeType.

The library has a single API function, `TTF_autohint`, which is described
[below](#function-ttf_autohint).

Bundled with the library there are two front-end programs, [`ttfautohint`
and `ttfautohintGUI`](#ttfautohint-and-ttfautohintgui), being a command line
and GUI application, respectively.


What exactly are hints?
-----------------------

To cite [Wikipedia](http://en.wikipedia.org/wiki/Font_hinting):

> **Font hinting** (also known as **instructing**) is the use of
> mathematical instructions to adjust the display of an outline font so that
> it lines up with a rasterized grid.  At low screen resolutions, hinting is
> critical for producing a clear, legible text.  It can be accompanied by
> antialiasing and (on liquid crystal displays) subpixel rendering for
> further clarity.

and Apple's [TrueType Reference
Manual](https://developer.apple.com/fonts/TTRefMan/RM03/Chap3.html#features):

> For optimal results, a font instructor should follow these guidelines:
>
>  - At small sizes, chance effects should not be allowed to magnify small
>    differences in the original outline design of a glyph.
>
>  - At large sizes, the subtlety of the original design should emerge.


In general, there are three possible ways to hint a glyph.

 1. The font contains hints (in the original sense of this word) to guide
    the rasterizer, telling it which shapes of the glyphs need special
    consideration.  The hinting logic is partly in the font and partly in
    the rasterizer.  More sophisticated rasterizers are able to produce
    better rendering results.

    This is how Type\ 1 and CFF font hints work.

 2. The font contains exact instructions (also called *bytecode*) on how to
    move the points of its outlines, depending on the resolution of the
    output device, and which intentionally distort the (outline) shape to
    produce a well-rasterized result.  The hinting logic is in the font;
    ideally, all rasterizeres simply process these instructions to get the
    same result on all platforms.

    This is how TrueType hints work.

 3. The font gets auto-hinted (at run-time).  The hinting logic is
    completely in the rasterizer.  No hints in the font are used or needed;
    instead, the rasterizer scans and analyzes the glyphs to apply
    corrections by itself.

    This is how FreeType's auto-hinter works; see
    [below](#background-and-technical-details) for more.


What problems can arise with TrueType hinting?
----------------------------------------------

While it is relatively easy to specify PostScript hints (either manually or
by an auto-hinter which works at font creation time), creating TrueType
hints is far more difficult.  There are at least two reasons:

  - TrueType instructions form a programming language, operating at a very
    low level.  They are comparable to assembler code, thus lacking all
    high-level concepts to make programming more comfortable.

    Here an example how such code looks like:

    ```
        SVTCA[0]
        PUSHB[ ]  /* 3 values pushed */
        18 1 0
        CALL[ ]
        PUSHB[ ]  /* 2 values pushed */
        15 4
        MIRP[01001]
        PUSHB[ ]  /* 3 values pushed */
        7 3 0
        CALL[ ]
    ```

    Another major obstacle is the fact that font designers usually aren't
    programmers.

  - It is very time consuming to manually hint glyphs.  Given that the
    number of specialists for TrueType hinting is very limited, hinting a
    large set of glyphs for a font or font family can become very expensive.


Why ttfautohint?
----------------

The ttfautohint library brings the excellent quality of FreeType rendering
to platforms which don't use FreeType, yet require hinting for text to look
good -- like Microsoft Windows.  Roughly speaking, it converts the glyph
analysis done by FreeType's auto-hinting module to TrueType bytecode.
Internally, the auto-hinter's algorithm resembles PostScript hinting
methods; it thus combines all three hinting methods discussed
[previously](#what-exactly-are-hints).

The simple interface of the front-ends (both on the command line and with
the GUI) allows quick hinting of a whole font with a few mouse clicks or a
single command on the prompt.  As a result, you get better rendering results
with web browsers, for example.

Across Windows rendering environments today, fonts processed with
ttfautohint look best with DirectWrite ClearType enabled.  This is the
default for Windows\ 7.  Good visual results are also seen in recent
MacOS\ X versions and GNU/Linux systems that use FreeType for rendering.
Work is now underway to improve the quality of the older Windows 'GDI'
rendering.

The goal of the project is to generate a 'first pass' of hinting that font
developers can refine further for ultimate quality.



`ttfautohint` and `ttfautohintGUI`
==================================

On all supported platforms (GNU/Linux, Windows, and Mac OS\ X), the GUI
looks quite similar; the used toolkit is [Qt], which in turn uses the
platform's native widgets.

![`ttfautohintGUI` on GNU/Linux running KDE](img/ttfautohintGUI.png)

Both the GUI and console version share the same features, to be discussed in
the next subsection.

**Warning: ttfautohint can't process a font a second time** (well, it can,
if the font doesn't contain composite glyphs).  Just think of ttfautohint as
being a compiler, a tool which also can't process its created output again.


Options
-------

`ttfautohintGUI` doesn't send any output to a console; however, it accepts
the same command line options as `ttfautohint`, setting default values for
the GUI.

Long options can be given with one or two dashes, and with and without equal
sign between option and argument.  This means that the following forms are
acceptable: `-foo=`*bar*, `--foo=`*bar*, `-foo`\ *bar*, and `--foo`\ *bar*.

Below, the section title gives the command's label in the GUI, then comes
the name of the corresponding long command line option and its short
equivalent, followed by a description.

Background and technical details on the meaning of the various options are
given [afterwards](#background-and-technical-details).

### Hint Set Ranges

`--hinting-range-min=`*n*, `-l`\ *n*
:   The minimum PPEM value (in pixels) at which hint sets are created.  The
    default value for *n* is\ 8.

`--hinting-range-max=`*n*, `-r`\ *n*
:   The maximum PPEM value (in pixels) at which hint sets are created.  The
    default value for *n* is 50.

### Hinting Limit

`--hinting-limit=`*n*, `-G`\ *n*
:   The *hinting limit* is the PPEM value (in pixels) where hinting gets
    switched off (using the `INSTCTRL` bytecode instruction); it has zero
    impact on the file size.  The default value for *n* is 200 which means
    that the font is not hinted for PPEM values larger than 200.

    Note that hinting in the range 'hinting-range-max' up to 'hinting-limit'
    uses the hinting configuration for 'hinting-range-max'.

    To omit a hinting limit, use `--hinting-limit=0` (or check the 'No
    Hinting Limit' box in the GUI).  Since this will cause internal math
    overflow in the rasterizer for large pixel values (>\ 1500px approx.) it
    is strongly recommended to not use this except for testing purposes.

### x Heights

`--increase-x-height`, `-x`
:   Normally, ttfautohint rounds the x\ height to the pixel grid, with a
    slight preference for rounding up.  If this flag is set, values are much
    more often rounded up.  Use this flag to increase the legibility of
    small sizes if necessary; you might get weird rendering results
    otherwise for glyphs like 'a' or 'e', depending on the font design.

### Fallback Script

`--latin-fallback`, `-f`
:   Set fallback script to 'latin', this is, use the 'latin' auto-hinting
    module instead of 'none' for all glyphs which can't be assigned to a
    script.  See [above](#scripts) for more details.

### Pre-Hinting

`--pre-hinting`, `-p`
:   *Pre-hinting* means that a font's original bytecode is applied to all
    glyphs before it is replaced with bytecode created by ttfautohint.
    This makes only sense if your font already has some hints in it which
    modify the shape even at EM size (normally 2048px); for example, some
    CJK fonts need this because the bytecode is used to scale and shift
    subglyphs.  For most fonts, however, this is not the case.

### ttfautohint Info

`--no-info`, `-n`
:   Don't add ttfautohint version and command line information to the
    version string or strings (with name ID\ 5) in the font's `name` table.
    In the GUI it is similar: If you uncheck the 'Add ttfautohint info' box,
    information is not added to the `name` table.  Except for testing and
    development purposes it is strongly recommended to not use this option.

### Symbol Fonts

`--symbol`, `-s`
:   Use default values for standard stem width and height instead of
    deriving them from latin character 'o'.  Use this option (usually in
    combination with option `--latin-fallback`) to hint symbol or dingbat
    fonts or math glyphs, for example, which lack character 'o', at the
    expense of possibly poor hinting results at small sizes.

### Font License Restrictions

`--ignore-restrictions`, `-i`
:   By default, fonts which have bit\ 1 set in the 'fsType' field of the
    `OS/2` table are rejected.  If you have a permission of the font's legal
    owner to modify the font, specify this command line option.

    If this option is not set, `ttfautohintGUI` shows a dialogue to handle
    such fonts if necessary.

### Miscellaneous

`--help`, `-h`
:   On the console, print a brief documentation on standard output and exit.
    This doesn't work with `ttfautohintGUI` on MS Windows.

`--version`, `-v`
:   On the console, print version information on standard output and exit.
    This doesn't work with `ttfautohintGUI` on MS Windows.



Samples
=======


Roboto
------

TODO


Ubuntu
------

TODO



Background and Technical Details
================================

[Real-Time Grid Fitting of Typographic
Outlines](http://www.tug.org/TUGboat/tb24-3/lemberg.pdf) is a scholarly
paper which describes FreeType's auto-hinter in some detail.  Regarding the
described data structures it is slightly out of date, but the algorithm
itself hasn't changed.

The next few subsections are mainly based on this article, introducing some
important concepts.  Note that ttfautohint only does hinting along the
vertical direction (this is, modifying y\ coordinates).


Segments and Edges
------------------

A glyph consists of one or more *contours* (this is, closed curves).  For
example, glyph 'O' consists of two contours, while glyph 'I' has only one.

![The letter 'O' has two contours, an inner and an outer one, while letter
  'I' has only an outer contour.](img/o-and-i.png)

A *segment* is a series of consecutive points of a contour (including its
Bézier control points) that are approximately aligned along a coordinate
axis.

![A serif.  Contour and control points are represented by squares and
  circles, respectively.  The bottom 'line' DE is approximately aligned
  along the horizontal axis, thus it forms a segment of 7\ points.  Together
  with the two other horizontal segments, BC and FG, they form two edges
  (BC+FG, DE).](img/segment-edge.png)

An *edge* corresponds to a single coordinate value on the main dimension
that collects one or more segments (allowing for a small threshold).  While
finding segments is done on the unscaled outline, finding edges is bound to
the device resolution.  See [below](#hint-sets) for an example.

The analysis to find segments and edges is specific to a script.


Feature Analysis
----------------

The auto-hinter analyzes a font in two steps.

  * Global Analysis

    This affects the hinting of all glyphs, trying to give them a uniform
    appearance.

      + Compute standard stem widths and heights of the font.  The values
        are normally taken from the glyph of letter 'o'.

      + Compute blue zones, see [below](#blue-zones).

    If stem widths and heights of single glyphs differ by a large value, or
    if ttfautohint fails to find proper blue zones, hinting becomes quite
    poor, leading even to severe shape distortions.

  * Glyph Analysis

    This is a per-glyph operation.

      + Find segments and edges.

      + Link edges together to find stems and serifs.  The abovementioned
        paper gives more details on what exactly constitutes a stem or a
        serif and how the algorithm works.


Blue Zones
----------

![Two blue zones relevant to the glyph 'a'.  Vertical point coordinates of
  *all* glyphs within these zones are aligned.](img/blue-zones.png)

Outlines of certain characters are used to determine *blue zones*.  This
concept is the same as with Type\ 1 fonts: All glyph points which lie in
certain small horizontal zones get aligned vertically.

Here a table which shows the characters used by the latin module; the values
are hard-coded in the source code.

  ID    Blue zone                              Characters
  ----  -----------                            ------------
  1     top of capital letters                 THEZOCQS
  2     bottom of capital letters              HEZLOCUS
  3     top of 'small f' like letters          fijkdbh
  4     top of small letters                   xzroesc
  5     bottom of small letters                xzroesc
  6     bottom of descenders of small letters  pqgjy

The 'round' characters (e.g. 'OCQS') from Zones 1, 2, and 5 are also used to
control the overshoot handling; to improve rendering at small sizes, zone\ 4
gets adjusted to be on the pixel grid; cf. the [`--increase-x-height`
option](#x-heights).

![This image shows the relevant glyph terms for vertical blue zone
  positions.](img/glyph-terms.png)


Grid Fitting
------------

Aligning outlines along the grid lines is called *grid fitting*.  It doesn't
necessarily mean that the outlines are positioned *exactly* on the grid,
however, especially if you want a smooth appearance at different sizes.
This is the central routine of the auto-hinter; its actions are highly
dependent on the used script.  Currently, only support for scripts which
work similarly to Latin (i.e.  Greek and Cyrillic) is available.

  * Align edges linked to blue zones.

  * Fit edges to the pixel grid.

  * Align serif edges.

  * Handle remaining 'strong' points.  Such points are not part of an edge
    but are still important for defining the shape.  This roughly
    corresponds to the `IP` TrueType instruction.

  * Everything else (the 'weak' points) is handled with an `IUP`
    instruction.

The following images illustrate the hinting process, using glyph 'a' from
the freely available font '[Ubuntu Book](http://font.ubuntu.com)'.  The
manual hints were added by [Dalton Maag Ltd], the used application to create
the hinting debug snapshots was [FontForge].

![Before hinting.](img/a-before-hinting.png)

![After hinting, using manual hints.](img/a-after-hinting.png)

![After hinting, using ttfautohint.  Note that the hinting process
  doesn't change horizontal positions.](img/a-after-autohinting.png)


Hint Sets
---------

In ttfautohint terminology, a *hint set* is the *optimal* configuration for
a given PPEM (pixel per EM) value.

Internally, ttfautohint creates hint sets for every PPEM value in the range
given by the `--hinting-range-min` and `--hinting-range-max` options (this
is a per-glyph operation).  If it differs to the current one, a new set is
emitted.  For some glyphs it is possible that one set covers, say, the range
8px-1000px, while other glyphs need 10 or more such sets.

One of the hinting configuration parameters is the decision which segments
form an edge.  For example, let us assume that two segments get aligned on a
single horizontal edge at 11px, while two edges are used at 12px.
This change makes ttfautohint emit a new hint set to accomodate this
situation.

![Before hinting, size 11px.](img/afii10108-11px-before-hinting.png)

![After hinting, size 11px.  Segments 43-27-28 and 14-15 are aligned on a
  single edge, as are segments 26-0-1 and
  20-21.](img/afii10108-11px-after-hinting.png)

![Before hinting, size 12px.](img/afii10108-12px-before-hinting.png)

![After hinting, size 12px.  The segments are not aligned.  While
  segments 43-27-28 and 20-21 now have almost the same horizontal position,
  they don't form an edge because the outlines passing through the segments
  point into different directions.](img/afii10108-12px-after-hinting.png)

Obviously, the more hint sets get emitted, the larger the bytecode
ttfautohint adds to the output font.  To find a good value\ *n* for
`--hinting-range-max`, some experimentation is necessary since *n* depends
on the glyph shapes in the input font.  If the value is too low, the hint
set created for the PPEM value\ *n* (this hint set gets used for all larger
PPEM values) might distort the outlines too much in the PPEM range given
by\ *n* and the value set by `--hinting-limit` (at which hinting gets
switched off).  If the value is too high, the font size increases due to
more hint sets without any noticeable hinting effects.

Similar arguments hold for `--hinting-range-min` except that there is no
lower limit at which hinting is switched off.


The '\.ttfautohint' Glyph
-------------------------

ttfautohint doesn't hint subglyphs of composite glyphs separately.  Instead,
it hints the whole glyph, this is, composites get recursively expanded so
that they form simple glyphs, then hints are applied -- this is the normal
working mode of FreeType's auto-hinter.

One problem, however, must be solved: Hinting for subglyphs (which usually
are used as normal glyphs also) must be deactivated so that nothing but the
final bytecode of the composite gets executed.

The trick used by ttfautohint is to prepend a composite element called
'\.ttfautohint', a dummy glyph with a single point, and which has a single
job: Its bytecode increases a variable (to be more precise, it is a CVT
register called `cvtl_is_subglyph` in the source code), indicating that we
are within a composite glyph.  The final bytecode of the composite glyph
eventually decrements this variable again.

As an example, let's consider composite glyph 'Agrave' ('À') which has the
subglyph 'A' as the base and 'grave' as its accent.  After processing with
ttfautohint it consists of three subglyphs: '\.ttfautohint', 'A', and
'grave' (in this order).

  Bytecode of    Action
  -------------  --------
  .ttfautohint   increase `cvtl_is_subglyph` (now: 1)
  A              do nothing because `cvtl_is_subglyph` > 0
  grave          do nothing because `cvtl_is_subglyph` > 0
  Agrave         decrease `cvtl_is_subglyph` (now: 0)\
                 apply hints because `cvtl_is_subglyph` == 0

Some technical details (which you might skip): All glyph point indices get
adjusted since each '\.ttfautohint' subglyph shifts all following indices by
one.  This must be done for both the bytecode and one subformat of
OpenType's `GPOS` anchor tables.

While this approach works fine on all tested platforms, there is one single
drawback: Direct rendering of the '\.ttfautohint' subglyph (this is,
rendering as a stand-alone glyph) disables proper hinting of all glyphs in
the font!  Under normal circumstances this never happens because
'\.ttfautohint' doesn't have an entry in the font's `cmap` table.  (However,
some test and demo programs like FreeType's `ftview` application or other
glyph viewers which are able to bypass the `cmap` table might be affected.)


Scripts
-------

ttfautohint checks which auto-hinting module should be used to hint a
specific glyph.  To do so, it checks a glyph's Unicode character code
whether it belongs to a given script.  Currently, only FreeType's 'latin'
autohinting module is implemented, but more are expected to come.  Here is
the hardcoded list of character ranges which are hinted by this 'latin'
module.  As you can see, this also covers some non-latin scripts (in the
Unicode sense) which have similar typographical properties.

    Character range    Description
  -------------------  -------------
  0x0020 - 0x007F      Basic Latin (no control chars)
  0x00A0 - 0x00FF      Latin-1 Supplement (no control chars)
  0x0100 - 0x017F      Latin Extended-A
  0x0180 - 0x024F      Latin Extended-B
  0x0250 - 0x02AF      IPA Extensions
  0x02B0 - 0x02FF      Spacing Modifier Letters
  0x0300 - 0x036F      Combining Diacritical Marks
  0x0370 - 0x03FF      Greek and Coptic
  0x0400 - 0x04FF      Cyrillic
  0x0500 - 0x052F      Cyrillic Supplement
  0x1D00 - 0x1D7F      Phonetic Extensions
  0x1D80 - 0x1DBF      Phonetic Extensions Supplement
  0x1DC0 - 0x1DFF      Combining Diacritical Marks Supplement
  0x1E00 - 0x1EFF      Latin Extended Additional
  0x1F00 - 0x1FFF      Greek Extended
  0x2000 - 0x206F      General Punctuation
  0x2070 - 0x209F      Superscripts and Subscripts
  0x20A0 - 0x20CF      Currency Symbols
  0x2150 - 0x218F      Number Forms
  0x2460 - 0x24FF      Enclosed Alphanumerics
  0x2C60 - 0x2C7F      Latin Extended-C
  0x2DE0 - 0x2DFF      Cyrillic Extended-A
  0xA640 - 0xA69F      Cyrillic Extended-B
  0xA720 - 0xA7FF      Latin Extended-D
  0xFB00 - 0xFB06      Alphab. Present. Forms (Latin Ligs)
  0x1D400 - 0x1D7FF    Mathematical Alphanumeric Symbols

If a glyph's character code is not covered by a script range, it is not
hinted (or rather, it gets hinted by the 'dummy' auto-hinting module which
essentially does nothing).  This can be changed by specifying a *fallback
script* with option `--latin-fallback`.

It is planned to extend ttfautohint so that the `GSUB` OpenType table gets
analyzed, mapping character codes to all glyph indices which can be reached
by switching on or off various OpenType features.


SFNT Tables
-----------

ttfautohint touches almost all SFNT tables within a TrueType or OpenType
font.  Note that only OpenType fonts with TrueType outlines are supported.
OpenType fonts with a `CFF` table (this is, with PostScript outlines) won't
work.

  * `glyf`: One glyph gets added (namely the '\.ttfautohint' glyph); all
    composites get an additional component; all hints in the table are
    replaced with new ones.

  * `cvt`, `prep`, and `fpgm`: These tables get replaced with data
    necessary for the new hinting bytecode.

  * `gasp`: Set up to always use grayscale rendering with grid-fitting
    for standard hinting, and symmetric grid-fitting and symmetric
    smoothing for horizontal subpixel hinting (ClearType).

  * `DSIG`: If it exists, it gets replaced with a dummy version.
    ttfautohint can't digitally sign a font; you have to do that afterwards.

  * `name`: The 'version' entries are modified to add information about the
    parameters which have been used for calling ttfautohint.  This can be
    controlled with the [`--no-info`](#ttfautohint-info) option.

  * `GPOS`, `hmtx`, `loca`, `head`, `maxp`, `post`: Updated to fit the
    additional '\.ttfautohint' glyph, the additional subglyphs in
    composites, and the new hinting bytecode.

  * `LTSH`, `hdmx`: Since ttfautohint doesn't do any horizontal hinting,
    those tables are superfluous and thus removed.

  * `VDMX`: Removed, since it depends on the original bytecode which
    ttfautohint removes.  A font editor might recompute the necessary data
    later on.


Problems
--------

Diagonals.

TODO

[Dalton Maag Ltd]: http://daltonmaag.com
[FontForge]: http://fontforge.sf.net
[Qt]: http://qt-project.org
